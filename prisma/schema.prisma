generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Event         Event[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  event_id    String   @id @default(cuid())
  event_name  String
  event_date  DateTime
  location    String?
  description String?
  creator_id  String
  created_at  DateTime @default(now())
  active      Boolean  @default(true)
  creator     User     @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  Rsvp        Rsvp[]
}

model Rsvp {
  invite_id    Int        @id @default(autoincrement())
  invite_name  String
  invite_email String     @unique
  attending    InviteType
  event_id     String
  event        Event      @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
}

enum InviteType {
  going
  not_going
  not_sure
}
